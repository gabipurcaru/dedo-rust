use std::str::FromStr;
use crate::types::{Value, Environment};
use crate::ast::{Statement, Term, Op};

grammar<'a>();

Num: f64 = r"[0-9]+(?:\.[0-9]+)?" => f64::from_str(<>).unwrap();

Ident: String = r"[a-zA-Z£$€_]+" => <>.into();

BasicTerm: Term = {
    "(" <AddTerm> ")" => <>,
    "-" <BasicTerm> => Term::Negate(Box::new(<>)),
    <n:Num> <i:Ident> => Term::Binary(Box::new(Term::Num(n)), Op::Mul, Box::new(Term::Ident(i))),
    <i:Ident> <n:Num> => Term::Binary(Box::new(Term::Num(n)), Op::Mul, Box::new(Term::Ident(i))),
    <Num> => Term::Num(<>),
    <Ident> => Term::Ident(<>),
};

PowTerm: Term = {
    BasicTerm,
    <l:PowTerm> "**" <r:BasicTerm> => Term::Binary(Box::new(l), Op::Pow, Box::new(r)),
    <l:PowTerm> "^" <r:BasicTerm> => Term::Binary(Box::new(l), Op::Pow, Box::new(r)),
}

MulTerm: Term = {
    PowTerm,
    <l:MulTerm> "*" <r:PowTerm> => Term::Binary(Box::new(l), Op::Mul, Box::new(r)),
    <l:MulTerm> "/" <r:PowTerm> => Term::Binary(Box::new(l), Op::Div, Box::new(r)),
}

AddTerm: Term = {
    MulTerm,
    <l:AddTerm> "+" <r:MulTerm> => Term::Binary(Box::new(l), Op::Add, Box::new(r)),
    <l:AddTerm> "-" <r:MulTerm> => Term::Binary(Box::new(l), Op::Sub, Box::new(r)),
}

pub Term: Statement = {
    AddTerm => Statement::Basic(<>),
    <Ident> "=" <AddTerm> => Statement::Assign(<>),
    <AddTerm> "in" <MulTerm> => Statement::Transform(<>),
    <AddTerm> "to" <MulTerm> => Statement::Transform(<>),
};