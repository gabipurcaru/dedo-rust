use std::str::FromStr;
use crate::types::{Value, Environment};

grammar<'a>(env: &'a mut Environment);

Num: f64 = r"[0-9]+(?:\.[0-9]+)?" => f64::from_str(<>).unwrap();

Ident: String = r"[a-zA-Z£$€_]+" => <>.into();

BasicTerm: Result<Value, ()> = {
    "(" <Term> ")" => <>,
    "-" <BasicTerm> => Ok(Value::negate(<>?)),
    <Num> <Ident> => Ok(Value::simple(<>)),
    <i:Ident> <n:Num> => Ok(Value::simple(n, i)),
    <Num> => Ok(Value::unitless(<>)),
    <Ident> => env.ident(<>),
};

PowTerm: Result<Value, ()> = {
    BasicTerm,
    <l:PowTerm> "**" <r:BasicTerm> => Ok(env.pow(l?, r?)),
    <l:PowTerm> "^" <r:BasicTerm> => Ok(env.pow(l?, r?)),
}

MulTerm: Result<Value, ()> = {
    PowTerm,
    <l:MulTerm> "*" <r:PowTerm> => Ok(env.mul(l?, r?)),
    <l:MulTerm> "/" <r:PowTerm> => Ok(env.div(l?, r?)),
}

AddTerm: Result<Value, ()> = {
    MulTerm,
    <l:AddTerm> "+" <r:MulTerm> => Ok(env.add(l?, r?)),
    <l:AddTerm> "-" <r:MulTerm> => Ok(env.sub(l?, r?)),
}

pub Term: Result<Value, ()> = {
    AddTerm,
    <i:Ident> "=" <v:Term> => env.assign(i, v?),
};