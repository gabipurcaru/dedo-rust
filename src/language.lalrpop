use std::str::FromStr;
use crate::types::{Value, Environment};

grammar<'a>(env: &'a mut Environment);

Num: f64 = r"[0-9]+(?:\.[0-9]+)?" => f64::from_str(<>).unwrap();

Ident: String = r"[a-zA-Z£$€_]+" => <>.into();

BasicTerm: Value = {
    "(" <BasicTerm> ")" => <>,
    "-" <BasicTerm> => Value::negate(<>), // TODO: preserve units
    <Num> <Ident> => Value::simple(<>),
    <i:Ident> <n:Num> => Value::simple(n, i),
    <Num> => Value::unitless(<>),
};

MulTerm: Value = {
    BasicTerm,
    <MulTerm> "*" <BasicTerm> => env.mul(<>),
    <MulTerm> "/" <BasicTerm> => env.div(<>),
}

AddTerm: Value = {
    MulTerm,
    <AddTerm> "+" <MulTerm> => env.add(<>),
    <AddTerm> "-" <MulTerm> => env.sub(<>),
}

pub Term: Value = AddTerm;